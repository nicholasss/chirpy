// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
insert into users (
	id, created_at, updated_at, email, hashed_password
) values (
	gen_random_uuid(), NOW(), NOW(), $1, $2
)
returning id, created_at, updated_at, email, hashed_password
`

type CreateUserParams struct {
	Email          string `json:"email"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
	)
	return i, err
}

const getUserByEmailRetHashedPassword = `-- name: GetUserByEmailRetHashedPassword :one
select id, created_at, updated_at, email, hashed_password from users
where email = $1
`

func (q *Queries) GetUserByEmailRetHashedPassword(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmailRetHashedPassword, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
	)
	return i, err
}

const getUserByEmailSafe = `-- name: GetUserByEmailSafe :one
select id, created_at, updated_at, email from users
where email = $1
`

type GetUserByEmailSafeRow struct {
	ID        uuid.UUID `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Email     string    `json:"email"`
}

func (q *Queries) GetUserByEmailSafe(ctx context.Context, email string) (GetUserByEmailSafeRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmailSafe, email)
	var i GetUserByEmailSafeRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
	)
	return i, err
}

const getUserByIDSafe = `-- name: GetUserByIDSafe :one
select id, created_at, updated_at, email from users
where id = $1
`

type GetUserByIDSafeRow struct {
	ID        uuid.UUID `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Email     string    `json:"email"`
}

func (q *Queries) GetUserByIDSafe(ctx context.Context, id uuid.UUID) (GetUserByIDSafeRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByIDSafe, id)
	var i GetUserByIDSafeRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
	)
	return i, err
}

const resetUsers = `-- name: ResetUsers :exec
delete from users
`

func (q *Queries) ResetUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetUsers)
	return err
}

const updateUser = `-- name: UpdateUser :one
update users
set
  updated_at = now(),
  email = $2,
  hashed_password = $3
where id = $1
returning id, created_at, updated_at, email
`

type UpdateUserParams struct {
	ID             uuid.UUID `json:"id"`
	Email          string    `json:"email"`
	HashedPassword string    `json:"hashed_password"`
}

type UpdateUserRow struct {
	ID        uuid.UUID `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Email     string    `json:"email"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.ID, arg.Email, arg.HashedPassword)
	var i UpdateUserRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
	)
	return i, err
}
