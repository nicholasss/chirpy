// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: refresh_tokens.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
insert into refresh_tokens (
  id, created_at, updated_at, user_id, expires_at, revoked_at
) values (
  $1, now(), now(), $2, $3, NULL
)
returning id, created_at, updated_at, user_id, expires_at, revoked_at
`

type CreateRefreshTokenParams struct {
	ID        string    `json:"id"`
	UserID    uuid.UUID `json:"user_id"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, createRefreshToken, arg.ID, arg.UserID, arg.ExpiresAt)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const getUserFromRefreshToken = `-- name: GetUserFromRefreshToken :one
select id, created_at, updated_at, user_id, expires_at, revoked_at from refresh_tokens
where id = $1
`

func (q *Queries) GetUserFromRefreshToken(ctx context.Context, id string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getUserFromRefreshToken, id)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const revokeRefreshTokenWithToken = `-- name: RevokeRefreshTokenWithToken :exec
update refresh_tokens
set
  updated_at = now(),
  revoked_at = now()
where id = $1
`

func (q *Queries) RevokeRefreshTokenWithToken(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, revokeRefreshTokenWithToken, id)
	return err
}
